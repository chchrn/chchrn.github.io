I"2<p>При разработке любого приложения возникает потребность выводить отладочные логи в консоль. Это могут быть ошибки или просто детали выполнения приложения.</p>

<p>Часто в коде используют просто <code class="language-plaintext highlighter-rouge">NSLog</code>/<code class="language-plaintext highlighter-rouge">print()</code>, но такое решение далеко от идеального. Есть популярная библиотека CocoaLumberjack. Долгое время я использовал её, но всё логирование завязывается на статические методы или макросы, которые дергаются из любого метода/класса.</p>

<p>Это распространенный подход, но совсем не объектно-ориентированный и не расширяемый. Чтобы разделить потоки логов от разных подсистем - придется както завязывать на константы в лог-сообщениях. Либо создавать новые макросы/статические методы.</p>

<p>Напрашивается решение - передавать некоторый объект через который будут логироваться все сообщения. Например, вот такой:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">protocol</span> <span class="kt">WlgLogEvent</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">level</span><span class="p">:</span> <span class="kt">WlgLogLevel</span> <span class="p">{</span><span class="k">get</span><span class="p">}</span>
    <span class="k">var</span> <span class="nv">message</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span><span class="k">get</span><span class="p">}</span>
<span class="p">}</span>

<span class="kd">public</span> <span class="kd">protocol</span> <span class="kt">WlgLog</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="n">log</span><span class="o">&lt;</span><span class="kt">E</span><span class="p">:</span> <span class="kt">WlgLogEvent</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">event</span><span class="p">:</span> <span class="kt">E</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Теперь некий абстрактный <code class="language-plaintext highlighter-rouge">WldLog</code> принимает абстрактные <code class="language-plaintext highlighter-rouge">WldLogEvent</code>. Подклассов для реализации конкретных ивентов можно придумать большое кол-во.</p>

<p>Самый простой - объект просто хранящий <code class="language-plaintext highlighter-rouge">level</code> и <code class="language-plaintext highlighter-rouge">message</code></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="kt">WlgLogEventDefault</span><span class="p">:</span> <span class="kt">WlgLogEvent</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="k">let</span> <span class="nv">level</span><span class="p">:</span> <span class="kt">WlgLogLevel</span>
    <span class="kd">public</span> <span class="k">let</span> <span class="nv">message</span><span class="p">:</span> <span class="kt">String</span>

    <span class="kd">@objc</span> <span class="kd">public</span> <span class="nf">init</span><span class="p">(</span><span class="nv">level</span><span class="p">:</span> <span class="kt">WlgLogLevel</span><span class="p">,</span> <span class="nv">message</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">level</span> <span class="o">=</span> <span class="n">level</span>
        <span class="k">self</span><span class="o">.</span><span class="n">message</span> <span class="o">=</span> <span class="n">message</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Теперь, чтобы залогировать некоторые операции можно просто передавать инстанс класса реализующего <code class="language-plaintext highlighter-rouge">WlgLog</code></p>

<p>Например, вот так:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DownloadOperation</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">log</span><span class="p">:</span> <span class="kt">WldLog</span>
    <span class="nf">init</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">,</span> <span class="nv">log</span><span class="p">:</span> <span class="kt">WldLog</span><span class="p">)</span> <span class="p">{</span>
        <span class="o">...</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">start</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="nf">log</span><span class="p">(</span><span class="kt">WlgLogEventDefault</span><span class="p">(</span><span class="o">.</span><span class="n">debug</span><span class="p">,</span> <span class="s">"Starting download operation"</span><span class="p">))</span>
    <span class="p">}</span>  
<span class="p">}</span>
</code></pre></div></div>

<p>Чтобы залогировать события можно реализовать интерфейс WlgLog через os_log, примерно вот так:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">WlgOsLog</span><span class="p">:</span> <span class="kt">WlgLog</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">subsystem</span><span class="p">:</span> <span class="kt">String</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">category</span><span class="p">:</span> <span class="kt">String</span>
    <span class="nf">init</span><span class="p">(</span><span class="nv">subsystem</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span><span class="p">,</span> <span class="nv">category</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">subsystem</span> <span class="o">=</span> <span class="n">subsystem</span>
        <span class="k">self</span><span class="o">.</span><span class="n">category</span> <span class="o">=</span> <span class="n">category</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="n">log</span><span class="o">&lt;</span><span class="kt">E</span><span class="p">:</span> <span class="kt">WlgLogEventI</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">event</span><span class="p">:</span> <span class="kt">E</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="kd">#available(iOS 10.0, macOS 10.12, tvOS 10.0, watchOS 3.0, *)</span> <span class="p">{</span>
            <span class="k">var</span> <span class="nv">osLogType</span> <span class="o">=</span> <span class="kt">OSLogType</span><span class="o">.</span><span class="k">default</span>
            <span class="k">var</span> <span class="nv">levelStr</span> <span class="o">=</span> <span class="s">""</span>
            <span class="k">switch</span> <span class="n">event</span><span class="o">.</span><span class="n">level</span> <span class="p">{</span>
            <span class="k">case</span> <span class="o">.</span><span class="nv">debug</span><span class="p">:</span>
                <span class="n">osLogType</span> <span class="o">=</span> <span class="o">.</span><span class="n">debug</span>
                <span class="n">levelStr</span> <span class="o">=</span> <span class="s">"[DEBUG]"</span>
            <span class="k">case</span> <span class="o">.</span><span class="nv">info</span><span class="p">:</span>
                <span class="n">osLogType</span> <span class="o">=</span> <span class="o">.</span><span class="n">info</span>
                <span class="n">levelStr</span> <span class="o">=</span> <span class="s">"[INFO]"</span>
            <span class="k">case</span> <span class="o">.</span><span class="nv">error</span><span class="p">:</span>
                <span class="n">osLogType</span> <span class="o">=</span> <span class="o">.</span><span class="n">error</span>
                <span class="n">levelStr</span> <span class="o">=</span> <span class="s">"[ERROR]"</span>
            <span class="k">default</span><span class="p">:</span>
                <span class="n">osLogType</span> <span class="o">=</span> <span class="o">.</span><span class="k">default</span>
            <span class="p">}</span>
    
            <span class="k">let</span> <span class="nv">osLog</span> <span class="o">=</span> <span class="kt">OSLog</span><span class="p">(</span><span class="nv">subsystem</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">subsystem</span><span class="p">,</span>
                              <span class="nv">category</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">category</span><span class="p">)</span>
            <span class="nf">os_log</span><span class="p">(</span><span class="s">"%{public}@ %{public}@"</span><span class="p">,</span>
                   <span class="nv">log</span><span class="p">:</span> <span class="n">osLog</span><span class="p">,</span>
                   <span class="nv">type</span><span class="p">:</span> <span class="n">osLogType</span><span class="p">,</span>
                   <span class="n">levelStr</span><span class="p">,</span>
                   <span class="n">event</span><span class="o">.</span><span class="n">message</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>В этом коде можно инстанцировать <code class="language-plaintext highlighter-rouge">WlgOsLog</code> с конкретной подсистемой и категорией. Тем самым упростив анализ логов в Console.app. При этом ничего не мешает использовать декорирование логгеров. И например, написать логгер отправляющий ошибки в Sentry/Firebase.</p>

<p>Чтобы не выводить ошибки в лог можно реализовать некоторый <code class="language-plaintext highlighter-rouge">WlgNullLog</code> , который не пишет никуда. Тогда в конструкторе объекта можно указывать дефолтную реализацию:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DownloadOperation</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">log</span><span class="p">:</span> <span class="kt">WldLog</span>
    <span class="nf">init</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">,</span> <span class="nv">log</span><span class="p">:</span> <span class="kt">WldLog</span> <span class="o">=</span> <span class="kt">WlgNullLog</span><span class="p">())</span> <span class="p">{</span>
            <span class="o">...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

:ET